From 97395fc96f65f65134256873fc773fab194f09b1 Mon Sep 17 00:00:00 2001
From: camilaDiToro <camiladitoro@gmail.com>
Date: Sat, 5 Nov 2022 16:21:40 -0300
Subject: [PATCH] Fix: use of memory after it is freed in selector.c

---
 src/selector.c | 23 +++++++++++++----------
 1 file changed, 13 insertions(+), 10 deletions(-)

diff --git a/src/selector.c b/src/selector.c
index 861d1db..09a20be 100644
--- a/src/selector.c
+++ b/src/selector.c
@@ -315,9 +315,11 @@ selector_destroy(fd_selector s) {
                 }
             }
             pthread_mutex_destroy(&s->resolution_mutex);
-            for(struct blocking_job *j = s->resolution_jobs; j != NULL;
-                j = j->next) {
-                free(j);
+            struct blocking_job* j = s->resolution_jobs;
+            while (j != NULL) {
+                struct blocking_job* aux = j;
+                j = j->next;
+                free(aux);
             }
             free(s->fds);
             s->fds     = NULL;
@@ -484,18 +486,19 @@ handle_block_notifications(fd_selector s) {
         .s = s,
     };
     pthread_mutex_lock(&s->resolution_mutex);
-    for(struct blocking_job *j = s->resolution_jobs;
-        j != NULL ;
-        j  = j->next) {
+    struct blocking_job* j = s->resolution_jobs;
+    while (j != NULL) {
 
-        struct item *item = s->fds + j->fd;
-        if(ITEM_USED(item)) {
-            key.fd   = item->fd;
+        struct item* item = s->fds + j->fd;
+        if (ITEM_USED(item)) {
+            key.fd = item->fd;
             key.data = item->data;
             item->handler->handle_block(&key);
         }
 
-        free(j);
+        struct blocking_job* aux = j;
+        j = j->next;
+        free(aux);
     }
     s->resolution_jobs = 0;
     pthread_mutex_unlock(&s->resolution_mutex);
-- 
2.25.1

